{ lib, pkgs, ... }:
{


  ## Despite the name, it can be (and often is) used to create files/directories that are intended to be permanent.
  ## step-ca.service: Failed to set up special execution directory in /var/lib: File exists
  # systemd.tmpfiles.rules = [
  #   ## "d /var/lib/step-ca 0755 step-ca step-ca"
  #   "d /var/lib/step-ca/certs 0755 step-ca step-ca"
  #   "d /var/lib/step-ca/config 0755 step-ca step-ca"
  #   "d /var/lib/step-ca/db 0755 step-ca step-ca"
  #   "d /var/lib/step-ca/secrets 0755 step-ca step-ca"
  #   "d /var/lib/step-ca/templates 0755 step-ca step-ca"
  # ];

  # systemd.tmpfiles.rules = [
  #   "d /home/cowboy/.ssh 0600 cowboy cowboy"
  # ];

  services = {

    ## configuration file indirection is needed to support reloading
    ## environment.etc."smallstep/ca.json".source = configFile;

    ## https://search.nixos.org/options?channel=unstable&show=services.step-ca.settings&from=0&size=50&sort=relevance&type=packages&query=step-ca
    ## https://github.com/NixOS/nixpkgs/blob/d4ee9275ce1c18b52140da2d151c91be167eee0b/nixos/modules/services/security/step-ca.nix#L124
    ## systemctl -f
    ## systemctl status step-ca.service
    ## systemctl start step-ca.service
    ## journalctl -f

    ## For normal operation of step-ca this is the correct structure:
    ## /etc/smallstep/ca.json - is generated by this config and red when service starts
    ## /var/lib/step-ca/secrets/intermediate_password - this is a path on the vm and is defined by intermediatePasswordFile
    ## /var/lib/step-ca/* - this folder structure has to pre-exist before starting the service

    step-ca = {
      enable = true;
      openFirewall = true;

      ## settings bellow are reflected in /etc/smallstep/ca.json
      ## address and port on which the CA bind and respond to requests.
      address =  "127.0.0.1";
      port = 443;

      ## Make sure to use a quoted absolute path instead of a path literal to prevent it from being copied to the globally readable Nix store.
      intermediatePasswordFile = "/var/lib/step-ca/secrets/intermediate_password"; # FIXME is world readable
      ## Not reflected in the config, /run/keys/ is empty, where is it used?

      ## Settings that go into ca.json. See the step-ca manual for more information.
      ## https://smallstep.com/docs/step-ca/configuration/#specify-a-configuration-file
      # settings = builtins.fromJSON (builtins.readFile "/etc/smallstep/ca.json");
      ## environment.variables.TEST_ENVIRONMENT = [ (builtins.readFile ./secrets/env_test) ];
      settings = builtins.fromJSON (builtins.readFile ./inception/step-ca/config/ca.json);
      # settings = {
      #   dnsNames = ["localhost"];

      #   ## content of the root certificate PEM file obtained from this repo.
      #   ## The root certificate is used to mutually authenticate all API clients of the CA.
      #   ## This can be a string containing one root PEM file, or an array containing multiple root CA files (useful for root rotation).
      #   root = ./step-ca/init-structure/certs/root_ca.crt; ## -> "/nix/store/...-root_ca.crt"

      #   ## Content of the intermediate_certificate file obtained from this repo.
      #   ## The intermediate certificate is returned alongside each new certificate, allowing the client to complete the certificate chain.
      #   ## Multiple intermediates are allowed here. When multiple intermediates are supplied, the first certificate in the PEM bundle must be the one used for signing.
      #   crt = ./step-ca/init-structure/certs/intermediate_ca.crt; ## -> /nix/store/...-intermediate_ca.crt

      #   ## ## Content of the intermediate_ca_key file obtained from this repo.
      #   ## The intermediate key signs all new certificates generated by the CA.
      #   key = ./step-ca/init-structure/secrets/intermediate_ca_key; ## -> /nix/store/...-intermediate_ca_key

      #   ## Content of the intermediate password file obtained from this repo.
      #   ## ☠️ plain text password for starting the CA. Used to decrypt the intermediate CA private key.
      #   ## In production, do not store a plain text password in your ca.json. Use the --password-file flag when running step-ca.
      #   #password = ./step-ca/init-structure/secrets/intermediate_ca_password; ##  -> /nix/store/...-intermediate_ca_password

      #   db = {
      #     type = "badger";
      #     dataSource = "/var/lib/step-ca/db";
      #   };

      #   authority = {
      #     provisioners = [
      #       {
      #         type = "ACME";
      #         name = "nix_acme";
      #       }
      #       # {
      #       #   type = "ACME";
      #       #   name = "acme";
      #       # }
      #     ];
      #   };
      # };
    };

    ## https://yilozt.github.io/en/posts/sql-init-nixos/
    ## GUI for step-ca: https://github.com/hakwerk/labca/blob/master/README_standalone.md
    mysql = {
      enable = true;
      package = pkgs.mariadb_114;
    };
  };
}
